// Generated by gencpp from file unity_msgs/ArmPose.msg
// DO NOT EDIT!


#ifndef UNITY_MSGS_MESSAGE_ARMPOSE_H
#define UNITY_MSGS_MESSAGE_ARMPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_msgs
{
template <class ContainerAllocator>
struct ArmPose_
{
  typedef ArmPose_<ContainerAllocator> Type;

  ArmPose_()
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , d4(0.0)
    , q5(0.0)
    , succ(0.0)  {
    }
  ArmPose_(const ContainerAllocator& _alloc)
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , d4(0.0)
    , q5(0.0)
    , succ(0.0)  {
  (void)_alloc;
    }



   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;

   typedef float _d4_type;
  _d4_type d4;

   typedef float _q5_type;
  _q5_type q5;

   typedef float _succ_type;
  _succ_type succ;





  typedef boost::shared_ptr< ::unity_msgs::ArmPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_msgs::ArmPose_<ContainerAllocator> const> ConstPtr;

}; // struct ArmPose_

typedef ::unity_msgs::ArmPose_<std::allocator<void> > ArmPose;

typedef boost::shared_ptr< ::unity_msgs::ArmPose > ArmPosePtr;
typedef boost::shared_ptr< ::unity_msgs::ArmPose const> ArmPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_msgs::ArmPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_msgs::ArmPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unity_msgs::ArmPose_<ContainerAllocator1> & lhs, const ::unity_msgs::ArmPose_<ContainerAllocator2> & rhs)
{
  return lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.d4 == rhs.d4 &&
    lhs.q5 == rhs.q5 &&
    lhs.succ == rhs.succ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unity_msgs::ArmPose_<ContainerAllocator1> & lhs, const ::unity_msgs::ArmPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unity_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unity_msgs::ArmPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_msgs::ArmPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_msgs::ArmPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_msgs::ArmPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_msgs::ArmPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_msgs::ArmPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_msgs::ArmPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffea4f3e3644005bdf0b21e3a7766cb5";
  }

  static const char* value(const ::unity_msgs::ArmPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffea4f3e3644005bULL;
  static const uint64_t static_value2 = 0xdf0b21e3a7766cb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_msgs::ArmPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_msgs/ArmPose";
  }

  static const char* value(const ::unity_msgs::ArmPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_msgs::ArmPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 d4\n"
"float32 q5\n"
"float32 succ\n"
;
  }

  static const char* value(const ::unity_msgs::ArmPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_msgs::ArmPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.d4);
      stream.next(m.q5);
      stream.next(m.succ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_msgs::ArmPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_msgs::ArmPose_<ContainerAllocator>& v)
  {
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
    s << indent << "d4: ";
    Printer<float>::stream(s, indent + "  ", v.d4);
    s << indent << "q5: ";
    Printer<float>::stream(s, indent + "  ", v.q5);
    s << indent << "succ: ";
    Printer<float>::stream(s, indent + "  ", v.succ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_MSGS_MESSAGE_ARMPOSE_H

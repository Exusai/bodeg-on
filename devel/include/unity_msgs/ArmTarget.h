// Generated by gencpp from file unity_msgs/ArmTarget.msg
// DO NOT EDIT!


#ifndef UNITY_MSGS_MESSAGE_ARMTARGET_H
#define UNITY_MSGS_MESSAGE_ARMTARGET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_msgs
{
template <class ContainerAllocator>
struct ArmTarget_
{
  typedef ArmTarget_<ContainerAllocator> Type;

  ArmTarget_()
    : xTarget(0.0)
    , yTarget(0.0)
    , zTarget(0.0)
    , grabAngle(0.0)  {
    }
  ArmTarget_(const ContainerAllocator& _alloc)
    : xTarget(0.0)
    , yTarget(0.0)
    , zTarget(0.0)
    , grabAngle(0.0)  {
  (void)_alloc;
    }



   typedef float _xTarget_type;
  _xTarget_type xTarget;

   typedef float _yTarget_type;
  _yTarget_type yTarget;

   typedef float _zTarget_type;
  _zTarget_type zTarget;

   typedef float _grabAngle_type;
  _grabAngle_type grabAngle;





  typedef boost::shared_ptr< ::unity_msgs::ArmTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_msgs::ArmTarget_<ContainerAllocator> const> ConstPtr;

}; // struct ArmTarget_

typedef ::unity_msgs::ArmTarget_<std::allocator<void> > ArmTarget;

typedef boost::shared_ptr< ::unity_msgs::ArmTarget > ArmTargetPtr;
typedef boost::shared_ptr< ::unity_msgs::ArmTarget const> ArmTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_msgs::ArmTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_msgs::ArmTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unity_msgs::ArmTarget_<ContainerAllocator1> & lhs, const ::unity_msgs::ArmTarget_<ContainerAllocator2> & rhs)
{
  return lhs.xTarget == rhs.xTarget &&
    lhs.yTarget == rhs.yTarget &&
    lhs.zTarget == rhs.zTarget &&
    lhs.grabAngle == rhs.grabAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unity_msgs::ArmTarget_<ContainerAllocator1> & lhs, const ::unity_msgs::ArmTarget_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unity_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unity_msgs::ArmTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_msgs::ArmTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_msgs::ArmTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_msgs::ArmTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_msgs::ArmTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_msgs::ArmTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_msgs::ArmTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bd81dd8154876a58e80e524a6eefe6e";
  }

  static const char* value(const ::unity_msgs::ArmTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bd81dd8154876a5ULL;
  static const uint64_t static_value2 = 0x8e80e524a6eefe6eULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_msgs::ArmTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_msgs/ArmTarget";
  }

  static const char* value(const ::unity_msgs::ArmTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_msgs::ArmTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xTarget\n"
"float32 yTarget\n"
"float32 zTarget\n"
"float32 grabAngle\n"
;
  }

  static const char* value(const ::unity_msgs::ArmTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_msgs::ArmTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xTarget);
      stream.next(m.yTarget);
      stream.next(m.zTarget);
      stream.next(m.grabAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_msgs::ArmTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_msgs::ArmTarget_<ContainerAllocator>& v)
  {
    s << indent << "xTarget: ";
    Printer<float>::stream(s, indent + "  ", v.xTarget);
    s << indent << "yTarget: ";
    Printer<float>::stream(s, indent + "  ", v.yTarget);
    s << indent << "zTarget: ";
    Printer<float>::stream(s, indent + "  ", v.zTarget);
    s << indent << "grabAngle: ";
    Printer<float>::stream(s, indent + "  ", v.grabAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_MSGS_MESSAGE_ARMTARGET_H

// Generated by gencpp from file unity_msgs/OrderPickerCameraRotation.msg
// DO NOT EDIT!


#ifndef UNITY_MSGS_MESSAGE_ORDERPICKERCAMERAROTATION_H
#define UNITY_MSGS_MESSAGE_ORDERPICKERCAMERAROTATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unity_msgs
{
template <class ContainerAllocator>
struct OrderPickerCameraRotation_
{
  typedef OrderPickerCameraRotation_<ContainerAllocator> Type;

  OrderPickerCameraRotation_()
    : orderPickerCameraRotation(0.0)  {
    }
  OrderPickerCameraRotation_(const ContainerAllocator& _alloc)
    : orderPickerCameraRotation(0.0)  {
  (void)_alloc;
    }



   typedef float _orderPickerCameraRotation_type;
  _orderPickerCameraRotation_type orderPickerCameraRotation;





  typedef boost::shared_ptr< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> const> ConstPtr;

}; // struct OrderPickerCameraRotation_

typedef ::unity_msgs::OrderPickerCameraRotation_<std::allocator<void> > OrderPickerCameraRotation;

typedef boost::shared_ptr< ::unity_msgs::OrderPickerCameraRotation > OrderPickerCameraRotationPtr;
typedef boost::shared_ptr< ::unity_msgs::OrderPickerCameraRotation const> OrderPickerCameraRotationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator1> & lhs, const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator2> & rhs)
{
  return lhs.orderPickerCameraRotation == rhs.orderPickerCameraRotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator1> & lhs, const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unity_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0b74d1f759a1fb713ba4af444bedb4b";
  }

  static const char* value(const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0b74d1f759a1fb7ULL;
  static const uint64_t static_value2 = 0x13ba4af444bedb4bULL;
};

template<class ContainerAllocator>
struct DataType< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unity_msgs/OrderPickerCameraRotation";
  }

  static const char* value(const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 orderPickerCameraRotation\n"
;
  }

  static const char* value(const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orderPickerCameraRotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OrderPickerCameraRotation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unity_msgs::OrderPickerCameraRotation_<ContainerAllocator>& v)
  {
    s << indent << "orderPickerCameraRotation: ";
    Printer<float>::stream(s, indent + "  ", v.orderPickerCameraRotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITY_MSGS_MESSAGE_ORDERPICKERCAMERAROTATION_H

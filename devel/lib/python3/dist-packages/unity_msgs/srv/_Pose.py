# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unity_msgs/PoseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import unity_msgs.msg

class PoseRequest(genpy.Message):
  _md5sum = "bad8e0c81e6e167c6af72ff81e1b124f"
  _type = "unity_msgs/PoseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ArmPose input

================================================================================
MSG: unity_msgs/ArmPose
float32 q1
float32 q2
float32 q3
float32 d4
float32 q5
float32 succ"""
  __slots__ = ['input']
  _slot_types = ['unity_msgs/ArmPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = unity_msgs.msg.ArmPose()
    else:
      self.input = unity_msgs.msg.ArmPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.input.q1, _x.input.q2, _x.input.q3, _x.input.d4, _x.input.q5, _x.input.succ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = unity_msgs.msg.ArmPose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.input.q1, _x.input.q2, _x.input.q3, _x.input.d4, _x.input.q5, _x.input.succ,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.input.q1, _x.input.q2, _x.input.q3, _x.input.d4, _x.input.q5, _x.input.succ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = unity_msgs.msg.ArmPose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.input.q1, _x.input.q2, _x.input.q3, _x.input.d4, _x.input.q5, _x.input.succ,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unity_msgs/PoseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import unity_msgs.msg

class PoseResponse(genpy.Message):
  _md5sum = "0689e36df5d12b3591755de018d79aad"
  _type = "unity_msgs/PoseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ArmPose output

================================================================================
MSG: unity_msgs/ArmPose
float32 q1
float32 q2
float32 q3
float32 d4
float32 q5
float32 succ"""
  __slots__ = ['output']
  _slot_types = ['unity_msgs/ArmPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PoseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = unity_msgs.msg.ArmPose()
    else:
      self.output = unity_msgs.msg.ArmPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.output.q1, _x.output.q2, _x.output.q3, _x.output.d4, _x.output.q5, _x.output.succ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = unity_msgs.msg.ArmPose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.output.q1, _x.output.q2, _x.output.q3, _x.output.d4, _x.output.q5, _x.output.succ,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.output.q1, _x.output.q2, _x.output.q3, _x.output.d4, _x.output.q5, _x.output.succ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = unity_msgs.msg.ArmPose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.output.q1, _x.output.q2, _x.output.q3, _x.output.d4, _x.output.q5, _x.output.succ,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
class Pose(object):
  _type          = 'unity_msgs/Pose'
  _md5sum = 'b83998b949202c6834b3ab9d4bd151b4'
  _request_class  = PoseRequest
  _response_class = PoseResponse
